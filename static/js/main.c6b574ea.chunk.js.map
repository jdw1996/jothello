{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","flippablePositions","concat","getValidMoves","boardArray","nextPlayer","validMoves","Map","set","Square","props","cssClasses","value","isValidMove","wouldBeFlipped","className","onClick","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Board","map","row","key","sc","handleBoardClick","handleSquareMouseEnter","handleSquareMouseLeave","Game","useState","isHumanNext","setIsHumanNext","width","height","ret","halfWidth","Math","floor","halfHeight","forEach","_v","k","split","Number","createBoardArray","setBoardArray","isGameFinished","setIsGameFinished","setValidMoves","status","currentKey","has","boardArrayClone","slice","get","newValidMoves","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6b574ea.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\nenum Marker {\r\n  HUMAN,\r\n  BOT,\r\n  FREE\r\n}\r\n\r\nfunction markerToStr(marker: Marker): string {\r\n  if (marker === Marker.HUMAN) {\r\n    return 'üëç'\r\n  } else if (marker === Marker.BOT) {\r\n    return 'ü§ñ'\r\n  } else {\r\n    return ''\r\n  }\r\n}\r\n\r\ninterface SquareContent {\r\n  marker: Marker\r\n  isValidMove: boolean\r\n  wouldBeFlipped: boolean\r\n}\r\n\r\nfunction createBoardArray(width: number, height: number, nextPlayer: Marker): SquareContent[][] {\r\n  let ret: SquareContent[][] = []\r\n  for (let j = 0; j < height; ++j) {\r\n    let row = []\r\n    for (let i = 0; i < width; ++i) {\r\n      row.push({ marker: Marker.FREE, isValidMove: false, wouldBeFlipped: false })\r\n    }\r\n    ret.push(row)\r\n  }\r\n  const halfWidth = Math.floor(width / 2)\r\n  const halfHeight = Math.floor(height / 2)\r\n  ret[halfHeight][halfWidth].marker = Marker.BOT\r\n  ret[halfHeight][halfWidth - 1].marker = Marker.HUMAN\r\n  ret[halfHeight - 1][halfWidth].marker = Marker.HUMAN\r\n  ret[halfHeight - 1][halfWidth - 1].marker = Marker.BOT\r\n  getValidMoves(ret, nextPlayer).forEach((_v, k) => {\r\n    const [x, y] = k.split(',')\r\n    ret[Number(y)][Number(x)].isValidMove = true\r\n  })\r\n  return ret\r\n}\r\n\r\nfunction flippableInDirection(\r\n  board: SquareContent[][], x: number, y: number, i: number, j: number, player: Marker\r\n): [number, number][] {\r\n  let flippable: [number, number][] = []\r\n  while (true) {\r\n    x += i\r\n    y += j\r\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) { return [] }\r\n    if (board[y][x].marker === Marker.FREE) {\r\n      return []\r\n    } else if (board[y][x].marker === player) {\r\n      return flippable\r\n    } else {\r\n      flippable.push([x, y])\r\n    }\r\n  }\r\n}\r\n\r\nfunction flippablePositions(board: SquareContent[][], x: number, y: number, player: Marker): [number, number][] {\r\n  if (board[y][x].marker !== Marker.FREE) { return [] }\r\n  let flippable: [number, number][] = []\r\n  for (let i = -1; i <= 1; ++i) {\r\n    for (let j = -1; j <= 1; ++j) {\r\n      flippable = flippable.concat(flippableInDirection(board, x, y, i, j, player))\r\n    }\r\n  }\r\n  return flippable\r\n}\r\n\r\nfunction getValidMoves(boardArray: SquareContent[][], nextPlayer: Marker): Map<string, [number, number][]> {\r\n  const validMoves = new Map<string, [number, number][]>()\r\n  for (let i = 0; i < boardArray.length; ++i) {\r\n    for (let j = 0; j < boardArray[0].length; ++j) {\r\n      let flippable = flippablePositions(boardArray, i, j, nextPlayer)\r\n      if (flippable.length > 0) {\r\n        validMoves.set(`${i},${j}`, flippable)\r\n      }\r\n    }\r\n  }\r\n  return validMoves\r\n}\r\n\r\ninterface SquareProps {\r\n  value: SquareContent\r\n  nextPlayer: Marker\r\n  onClick: () => void\r\n  handleMouseEnter: () => void\r\n  handleMouseLeave: () => void\r\n}\r\n\r\nfunction Square(props: SquareProps): JSX.Element {\r\n  let cssClasses = 'square'\r\n  if (props.value.isValidMove) {\r\n    cssClasses += ' valid-move'\r\n    if (props.nextPlayer === Marker.HUMAN) {\r\n      cssClasses += ' valid-human-move'\r\n    } else {\r\n      cssClasses += ' valid-bot-move'\r\n    }\r\n  }\r\n  if (props.value.wouldBeFlipped) {\r\n    cssClasses += ' would-be-flipped'\r\n    if (props.nextPlayer === Marker.HUMAN) {\r\n      cssClasses += ' would-be-flipped-human'\r\n    } else {\r\n      cssClasses += ' would-be-flipped-bot'\r\n    }\r\n  }\r\n  return (\r\n    <td className={cssClasses} onClick={props.onClick} onMouseEnter={props.handleMouseEnter} onMouseLeave={props.handleMouseLeave}>\r\n      {markerToStr(props.value.marker)}\r\n    </td>\r\n  )\r\n}\r\n\r\ninterface BoardProps {\r\n  boardArray: SquareContent[][]\r\n  nextPlayer: Marker\r\n  handleBoardClick: (x: number, y: number) => void\r\n  handleSquareMouseEnter: (x: number, y: number) => void\r\n  handleSquareMouseLeave: () => void\r\n}\r\n\r\nfunction Board(props: BoardProps): JSX.Element {\r\n  return (\r\n    <div>\r\n      <table><tbody>\r\n        {props.boardArray.map((row, y) => (\r\n          <tr key={y} className=\"board-row\">\r\n            {row.map((sc, x) => (\r\n              <Square\r\n                key={`${x} ${y}`}\r\n                value={sc}\r\n                nextPlayer={props.nextPlayer}\r\n                onClick={() => props.handleBoardClick(x, y)}\r\n                handleMouseEnter={() => props.handleSquareMouseEnter(x, y)}\r\n                handleMouseLeave={props.handleSquareMouseLeave}\r\n              />\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody></table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Game(): JSX.Element {\r\n  const BOARD_HEIGHT = 4\r\n  const BOARD_WIDTH = 4\r\n  const [isHumanNext, setIsHumanNext] = useState(true)\r\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\r\n  const [boardArray, setBoardArray] = useState(createBoardArray(BOARD_WIDTH, BOARD_HEIGHT, nextPlayer))\r\n  const [isGameFinished, setIsGameFinished] = useState(false)\r\n  const [validMoves, setValidMoves] = useState(getValidMoves(boardArray, nextPlayer))\r\n  const status = isGameFinished ? 'Game over.' : `Next player: ${markerToStr(nextPlayer)}`\r\n\r\n  const handleBoardClick = (x: number, y: number) => {\r\n    if (isGameFinished) { return }\r\n    const currentKey = `${x},${y}`\r\n    if (!validMoves.has(currentKey)) { return }\r\n    const boardArrayClone = boardArray.slice()\r\n    boardArrayClone[y][x].marker = nextPlayer\r\n    validMoves.get(currentKey)?.forEach(([i, j]) => {\r\n      boardArrayClone[j][i].marker = nextPlayer\r\n    })\r\n    let newValidMoves = getValidMoves(boardArrayClone, isHumanNext ? Marker.BOT : Marker.HUMAN)\r\n    if (newValidMoves.size === 0) {\r\n      newValidMoves = getValidMoves(boardArrayClone, nextPlayer)\r\n      if (newValidMoves.size === 0) {\r\n        setIsGameFinished(true)\r\n      }\r\n    } else {\r\n      setIsHumanNext(!isHumanNext)\r\n    }\r\n    for (let i = 0; i < BOARD_WIDTH; ++i) {\r\n      for (let j = 0; j < BOARD_HEIGHT; ++j) {\r\n        boardArrayClone[j][i].isValidMove = newValidMoves.has(`${i},${j}`)\r\n        boardArrayClone[j][i].wouldBeFlipped = false\r\n      }\r\n    }\r\n    setBoardArray(boardArrayClone)\r\n    setValidMoves(newValidMoves)\r\n  }\r\n  const handleSquareMouseEnter = (x: number, y: number) => {\r\n    const currentKey = `${x},${y}`\r\n    if (!validMoves.has(currentKey)) { return }\r\n    const boardArrayClone = boardArray.slice()\r\n    validMoves.get(currentKey)?.forEach(([i, j]) => {\r\n      boardArrayClone[j][i].wouldBeFlipped = true\r\n    })\r\n    setBoardArray(boardArrayClone)\r\n  }\r\n  const handleSquareMouseLeave = () => {\r\n    const boardArrayClone = boardArray.slice()\r\n    for (let i = 0; i < boardArrayClone[0].length; ++i) {\r\n      for (let j = 0; j < boardArrayClone.length; ++j) {\r\n        boardArrayClone[j][i].wouldBeFlipped = false\r\n      }\r\n    }\r\n    setBoardArray(boardArrayClone)\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"game-board\">\r\n        <Board\r\n          boardArray={boardArray}\r\n          nextPlayer={nextPlayer}\r\n          handleBoardClick={handleBoardClick}\r\n          handleSquareMouseEnter={handleSquareMouseEnter}\r\n          handleSquareMouseLeave={handleSquareMouseLeave}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}