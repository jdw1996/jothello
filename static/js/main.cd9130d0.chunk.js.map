{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","canFlipInDirection","board","x","y","i","j","player","foundSomeToFlip","length","console","log","FREE","Square","props","className","onClick","value","Board","handleSquareClick","handleBoardClick","boardArray","map","row","key","Game","useState","isHumanNext","setIsHumanNext","ret","Array","fill","push","halfX","Math","floor","halfY","createBoardArray","setBoardArray","nextPlayer","status","isValidMove","rowNum","colNum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd9130d0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç'\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ'\n  } else {\n    return ''\n  }\n}\n\nfunction createBoardArray(x: number, y: number) : Marker[][] {\n  let ret = []\n  for (let i = 0; i < y; ++i) {\n    let row = Array(x).fill(Marker.FREE)\n    ret.push(row)\n  }\n  const halfX = Math.floor(x / 2)\n  const halfY = Math.floor(y / 2)\n  ret[halfY][halfX] = Marker.BOT\n  ret[halfY][halfX-1] = Marker.HUMAN\n  ret[halfY-1][halfX] = Marker.HUMAN\n  ret[halfY-1][halfX-1] = Marker.BOT\n  return ret\n}\n\nfunction canFlipInDirection(board: Marker[][], x: number, y: number, i: number, j: number, player: Marker) : boolean {\n  x += i\n  y += j\n  let foundSomeToFlip = false\n  while (x >= 0 && x < board[0].length && y >= 0 && y < board.length) {\n    console.log(`${i} ${j}`, markerToStr(board[y][x]))\n    if (board[y][x] === Marker.FREE) {\n      return false\n    } else if (board[y][x] === player) {\n      return foundSomeToFlip\n    } else {\n      foundSomeToFlip = true\n    }\n    x += i\n    y += j\n  }\n  return false\n}\n\nfunction isValidMove(board: Marker[][], x: number, y: number, player: Marker) : boolean {\n  if (board[y][x] !== Marker.FREE) { return false }\n  let ret = false\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      ret = ret || canFlipInDirection(board, x, y, i, j, player)\n    }\n  }\n  return ret\n}\n\ninterface SquareProps {\n  x: number\n  y: number\n  value: Marker\n  onClick: (x: number, y: number) => void\n}\n\nfunction Square(props: SquareProps) : JSX.Element {\n  return (\n      <td className=\"square\" onClick={() => props.onClick(props.x, props.y) }>\n        {markerToStr(props.value)}\n      </td>\n    )\n}\n\ninterface BoardProps {\n  isHumanNext: boolean\n  boardArray: Marker[][]\n  handleBoardClick: (x: number, y: number) => void\n}\n\nfunction Board(props: BoardProps) : JSX.Element {\n  const handleSquareClick = (x: number, y: number) => { props.handleBoardClick(x, y) }\n  return (\n    <div>\n      <table><tbody>\n        {props.boardArray.map((row, y) => (\n          <tr key={y} className=\"board-row\">\n            {row.map((marker, x) => (\n              <Square key={`${x} ${y}`} value={marker} onClick={handleSquareClick} x={x} y={y} />\n            ))}\n          </tr>\n        ))}\n      </tbody></table>\n    </div>\n  )\n}\n\nfunction Game() : JSX.Element {\n  const [isHumanNext, setIsHumanNext] = useState(true)\n  const [boardArray, setBoardArray] = useState(createBoardArray(8,8))\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\n  const status = `Next player: ${markerToStr(nextPlayer)}`\n  const handleBoardClick = (x: number, y: number) => {\n    if (!isValidMove(boardArray, x, y, nextPlayer)) { return }\n    setIsHumanNext(!isHumanNext)\n    setBoardArray(boardArray.map((row, rowNum) => (\n      row.map((marker, colNum) => ((rowNum === y && colNum === x) ? nextPlayer : marker))\n    )))\n  }\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board isHumanNext={isHumanNext} handleBoardClick={handleBoardClick} boardArray={boardArray} />\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}