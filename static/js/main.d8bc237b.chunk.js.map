{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","flippablePositions","concat","getValidMoves","boardArray","nextPlayer","validMoves","Map","set","Square","props","cssClasses","value","isValidMove","wouldBeFlipped","className","onClick","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Board","map","row","key","sc","handleBoardClick","handleSquareMouseEnter","handleSquareMouseLeave","Game","useState","isHumanNext","setIsHumanNext","width","height","ret","halfWidth","Math","floor","halfHeight","forEach","_v","k","split","Number","createBoardArray","setBoardArray","isGameFinished","setIsGameFinished","setValidMoves","status","currentKey","has","boardArrayClone","slice","get","newValidMoves","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8bc237b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE,\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç';\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ';\n  } else {\n    return '';\n  }\n}\n\ninterface SquareContent {\n  marker: Marker;\n  isValidMove: boolean;\n  wouldBeFlipped: boolean;\n}\n\nfunction createBoardArray(\n  width: number,\n  height: number,\n  nextPlayer: Marker,\n): SquareContent[][] {\n  const ret: SquareContent[][] = [];\n  for (let j = 0; j < height; ++j) {\n    const row = [];\n    for (let i = 0; i < width; ++i) {\n      row.push({\n        marker: Marker.FREE,\n        isValidMove: false,\n        wouldBeFlipped: false,\n      });\n    }\n    ret.push(row);\n  }\n  const halfWidth = Math.floor(width / 2);\n  const halfHeight = Math.floor(height / 2);\n  ret[halfHeight][halfWidth].marker = Marker.BOT;\n  ret[halfHeight][halfWidth - 1].marker = Marker.HUMAN;\n  ret[halfHeight - 1][halfWidth].marker = Marker.HUMAN;\n  ret[halfHeight - 1][halfWidth - 1].marker = Marker.BOT;\n  getValidMoves(ret, nextPlayer).forEach((_v, k) => {\n    const [x, y] = k.split(',');\n    ret[Number(y)][Number(x)].isValidMove = true;\n  });\n  return ret;\n}\n\nfunction flippableInDirection(\n  board: SquareContent[][],\n  x: number,\n  y: number,\n  i: number,\n  j: number,\n  player: Marker,\n): [number, number][] {\n  const flippable: [number, number][] = [];\n  while (true) {\n    x += i;\n    y += j;\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) {\n      return [];\n    }\n    if (board[y][x].marker === Marker.FREE) {\n      return [];\n    } else if (board[y][x].marker === player) {\n      return flippable;\n    } else {\n      flippable.push([x, y]);\n    }\n  }\n}\n\nfunction flippablePositions(\n  board: SquareContent[][],\n  x: number,\n  y: number,\n  player: Marker,\n): [number, number][] {\n  if (board[y][x].marker !== Marker.FREE) {\n    return [];\n  }\n  let flippable: [number, number][] = [];\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      flippable = flippable.concat(\n        flippableInDirection(board, x, y, i, j, player),\n      );\n    }\n  }\n  return flippable;\n}\n\nfunction getValidMoves(\n  boardArray: SquareContent[][],\n  nextPlayer: Marker,\n): Map<string, [number, number][]> {\n  const validMoves = new Map<string, [number, number][]>();\n  for (let i = 0; i < boardArray.length; ++i) {\n    for (let j = 0; j < boardArray[0].length; ++j) {\n      const flippable = flippablePositions(boardArray, i, j, nextPlayer);\n      if (flippable.length > 0) {\n        validMoves.set(`${i},${j}`, flippable);\n      }\n    }\n  }\n  return validMoves;\n}\n\ninterface SquareProps {\n  value: SquareContent;\n  nextPlayer: Marker;\n  onClick: () => void;\n  handleMouseEnter: () => void;\n  handleMouseLeave: () => void;\n}\n\nfunction Square(props: SquareProps): JSX.Element {\n  let cssClasses = 'square';\n  if (props.value.isValidMove) {\n    cssClasses += ' valid-move';\n    if (props.nextPlayer === Marker.HUMAN) {\n      cssClasses += ' valid-human-move';\n    } else {\n      cssClasses += ' valid-bot-move';\n    }\n  }\n  if (props.value.wouldBeFlipped) {\n    cssClasses += ' would-be-flipped';\n    if (props.nextPlayer === Marker.HUMAN) {\n      cssClasses += ' would-be-flipped-human';\n    } else {\n      cssClasses += ' would-be-flipped-bot';\n    }\n  }\n  return (\n    <td\n      className={cssClasses}\n      onClick={props.onClick}\n      onMouseEnter={props.handleMouseEnter}\n      onMouseLeave={props.handleMouseLeave}\n    >\n      {markerToStr(props.value.marker)}\n    </td>\n  );\n}\n\ninterface BoardProps {\n  boardArray: SquareContent[][];\n  nextPlayer: Marker;\n  handleBoardClick: (x: number, y: number) => void;\n  handleSquareMouseEnter: (x: number, y: number) => void;\n  handleSquareMouseLeave: () => void;\n}\n\nfunction Board(props: BoardProps): JSX.Element {\n  return (\n    <div>\n      <table>\n        <tbody>\n          {props.boardArray.map((row, y) => (\n            <tr key={y} className=\"board-row\">\n              {row.map((sc, x) => (\n                <Square\n                  key={`${x} ${y}`}\n                  value={sc}\n                  nextPlayer={props.nextPlayer}\n                  onClick={() => props.handleBoardClick(x, y)}\n                  handleMouseEnter={() => props.handleSquareMouseEnter(x, y)}\n                  handleMouseLeave={props.handleSquareMouseLeave}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction Game(): JSX.Element {\n  const BOARD_HEIGHT = 4;\n  const BOARD_WIDTH = 4;\n  const [isHumanNext, setIsHumanNext] = useState(true);\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT;\n  const [boardArray, setBoardArray] = useState(\n    createBoardArray(BOARD_WIDTH, BOARD_HEIGHT, nextPlayer),\n  );\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [validMoves, setValidMoves] = useState(\n    getValidMoves(boardArray, nextPlayer),\n  );\n  const status = isGameFinished\n    ? 'Game over.'\n    : `Next player: ${markerToStr(nextPlayer)}`;\n\n  const handleBoardClick = (x: number, y: number) => {\n    if (isGameFinished) {\n      return;\n    }\n    const currentKey = `${x},${y}`;\n    if (!validMoves.has(currentKey)) {\n      return;\n    }\n    const boardArrayClone = boardArray.slice();\n    boardArrayClone[y][x].marker = nextPlayer;\n    for (const [i, j] of validMoves.get(currentKey) || []) {\n      boardArrayClone[j][i].marker = nextPlayer;\n    }\n    let newValidMoves = getValidMoves(\n      boardArrayClone,\n      isHumanNext ? Marker.BOT : Marker.HUMAN,\n    );\n    if (newValidMoves.size === 0) {\n      newValidMoves = getValidMoves(boardArrayClone, nextPlayer);\n      if (newValidMoves.size === 0) {\n        setIsGameFinished(true);\n      }\n    } else {\n      setIsHumanNext(!isHumanNext);\n    }\n    for (let i = 0; i < BOARD_WIDTH; ++i) {\n      for (let j = 0; j < BOARD_HEIGHT; ++j) {\n        boardArrayClone[j][i].isValidMove = newValidMoves.has(`${i},${j}`);\n        boardArrayClone[j][i].wouldBeFlipped = false;\n      }\n    }\n    setBoardArray(boardArrayClone);\n    setValidMoves(newValidMoves);\n  };\n  const handleSquareMouseEnter = (x: number, y: number) => {\n    const currentKey = `${x},${y}`;\n    if (!validMoves.has(currentKey)) {\n      return;\n    }\n    const boardArrayClone = boardArray.slice();\n    for (const [i, j] of validMoves.get(currentKey) || []) {\n      boardArrayClone[j][i].wouldBeFlipped = true;\n    }\n    setBoardArray(boardArrayClone);\n  };\n  const handleSquareMouseLeave = () => {\n    const boardArrayClone = boardArray.slice();\n    for (let i = 0; i < boardArrayClone[0].length; ++i) {\n      for (let j = 0; j < boardArrayClone.length; ++j) {\n        boardArrayClone[j][i].wouldBeFlipped = false;\n      }\n    }\n    setBoardArray(boardArrayClone);\n  };\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board\n          boardArray={boardArray}\n          nextPlayer={nextPlayer}\n          handleBoardClick={handleBoardClick}\n          handleSquareMouseEnter={handleSquareMouseEnter}\n          handleSquareMouseLeave={handleSquareMouseLeave}\n        />\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}