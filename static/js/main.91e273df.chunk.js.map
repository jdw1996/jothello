{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","flippablePositions","concat","getValidMoves","boardArray","nextPlayer","validMoves","Map","set","Square","props","cssClasses","value","isValidMove","wouldBeFlipped","className","onClick","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Board","map","row","key","sc","handleBoardClick","handleSquareMouseEnter","handleSquareMouseLeave","Game","useState","isHumanNext","setIsHumanNext","width","height","ret","halfWidth","Math","floor","halfHeight","forEach","_v","k","split","Number","createBoardArray","setBoardArray","lastPlayerPassed","setLastPlayerPassed","isGameFinished","setIsGameFinished","setValidMoves","status","size","currentKey","has","boardArrayClone","slice","get","newValidMoves","ReactDOM","render","document","getElementById"],"mappings":"sKAIKA,E,6CAML,SAASC,EAAYC,GACnB,OAAIA,IAAWF,EAAOG,MACb,eACED,IAAWF,EAAOI,IACpB,eAEA,GAgCX,SAASC,EACPC,EAA0BC,EAAWC,EAAWC,EAAWC,EAAWC,GAGtE,IADA,IAAIC,EAAgC,KACvB,CAGX,GADAJ,GAAKE,GADLH,GAAKE,GAEG,GAAKF,GAAKD,EAAM,GAAGO,QAAUL,EAAI,GAAKA,GAAKF,EAAMO,OAAU,MAAO,GAC1E,GAAIP,EAAME,GAAGD,GAAGL,SAAWF,EAAOc,KAChC,MAAO,GACF,GAAIR,EAAME,GAAGD,GAAGL,SAAWS,EAChC,OAAOC,EAEPA,EAAUG,KAAK,CAACR,EAAGC,KAKzB,SAASQ,EAAmBV,EAA0BC,EAAWC,EAAWG,GAC1E,GAAIL,EAAME,GAAGD,GAAGL,SAAWF,EAAOc,KAAQ,MAAO,GAEjD,IADA,IAAIF,EAAgC,GAC3BH,GAAK,EAAGA,GAAK,IAAKA,EACzB,IAAK,IAAIC,GAAK,EAAGA,GAAK,IAAKA,EACzBE,EAAYA,EAAUK,OAAOZ,EAAqBC,EAAOC,EAAGC,EAAGC,EAAGC,EAAGC,IAGzE,OAAOC,EAGT,SAASM,EAAcC,EAA+BC,GAEpD,IADA,IAAMC,EAAa,IAAIC,IACdb,EAAI,EAAGA,EAAIU,EAAWN,SAAUJ,EACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIS,EAAW,GAAGN,SAAUH,EAAG,CAC7C,IAAIE,EAAYI,EAAmBG,EAAYV,EAAGC,EAAGU,GACjDR,EAAUC,OAAS,GACrBQ,EAAWE,IAAX,UAAkBd,EAAlB,YAAuBC,GAAKE,GAIlC,OAAOS,EAWT,SAASG,EAAOC,GACd,IAAIC,EAAa,SAiBjB,OAhBID,EAAME,MAAMC,cACdF,GAAc,cACVD,EAAML,aAAepB,EAAOG,MAC9BuB,GAAc,oBAEdA,GAAc,mBAGdD,EAAME,MAAME,iBACdH,GAAc,oBACVD,EAAML,aAAepB,EAAOG,MAC9BuB,GAAc,0BAEdA,GAAc,yBAIhB,wBAAII,UAAWJ,EAAYK,QAASN,EAAMM,QAASC,aAAcP,EAAMQ,iBAAkBC,aAAcT,EAAMU,kBAC1GlC,EAAYwB,EAAME,MAAMzB,SAa/B,SAASkC,EAAMX,GACb,OACE,6BACE,+BAAO,+BACJA,EAAMN,WAAWkB,KAAI,SAACC,EAAK9B,GAAN,OACpB,wBAAI+B,IAAK/B,EAAGsB,UAAU,aACnBQ,EAAID,KAAI,SAACG,EAAIjC,GAAL,OACP,kBAACiB,EAAD,CACEe,IAAG,UAAKhC,EAAL,YAAUC,GACbmB,MAAOa,EACPpB,WAAYK,EAAML,WAClBW,QAAS,kBAAMN,EAAMgB,iBAAiBlC,EAAGC,IACzCyB,iBAAkB,kBAAMR,EAAMiB,uBAAuBnC,EAAGC,IACxD2B,iBAAkBV,EAAMkB,mCAUxC,SAASC,IACP,IAD2B,EAGWC,oBAAS,GAHpB,mBAGpBC,EAHoB,KAGPC,EAHO,KAIrB3B,EAAa0B,EAAc9C,EAAOG,MAAQH,EAAOI,IAJ5B,EAKSyC,mBArItC,SAA0BG,EAAeC,EAAgB7B,GAEvD,IADA,IAAI8B,EAAyB,GACpBxC,EAAI,EAAGA,EAAIuC,IAAUvC,EAAG,CAE/B,IADA,IAAI4B,EAAM,GACD7B,EAAI,EAAGA,EAAIuC,IAASvC,EAC3B6B,EAAIvB,KAAK,CAAEb,OAAQF,EAAOc,KAAMc,aAAa,EAAOC,gBAAgB,IAEtEqB,EAAInC,KAAKuB,GAEX,IAAMa,EAAYC,KAAKC,MAAML,EAAQ,GAC/BM,EAAaF,KAAKC,MAAMJ,EAAS,GASvC,OARAC,EAAII,GAAYH,GAAWjD,OAASF,EAAOI,IAC3C8C,EAAII,GAAYH,EAAY,GAAGjD,OAASF,EAAOG,MAC/C+C,EAAII,EAAa,GAAGH,GAAWjD,OAASF,EAAOG,MAC/C+C,EAAII,EAAa,GAAGH,EAAY,GAAGjD,OAASF,EAAOI,IACnDc,EAAcgC,EAAK9B,GAAYmC,SAAQ,SAACC,EAAIC,GAAO,IAAD,EACjCA,EAAEC,MAAM,KADyB,mBACzCnD,EADyC,KACtCC,EADsC,KAEhD0C,EAAIS,OAAOnD,IAAImD,OAAOpD,IAAIqB,aAAc,KAEnCsB,EAkHsCU,CAHzB,EADC,EAIoExC,IAL9D,mBAKpBD,EALoB,KAKR0C,EALQ,OAMqBhB,oBAAS,GAN9B,mBAMpBiB,EANoB,KAMFC,EANE,OAOiBlB,oBAAS,GAP1B,mBAOpBmB,EAPoB,KAOJC,EAPI,OAQSpB,mBAAS3B,EAAcC,EAAYC,IAR5C,mBAQpBC,EARoB,KAQR6C,EARQ,KASrBC,EAASH,EAAiB,aAAH,uBAAkC/D,EAAYmB,IACtE4C,GACqB,IAApB3C,EAAW+C,OACTN,EACFG,GAAkB,IAElBlB,GAAgBD,GAChBiB,GAAoB,KA2C1B,OACE,yBAAKjC,UAAU,QACb,yBAAKA,UAAU,UAAUqC,GACzB,yBAAKrC,UAAU,cACb,kBAACM,EAAD,CACEjB,WAAYA,EACZC,WAAYA,EACZqB,iBA9CiB,SAAClC,EAAWC,GAAe,IAAD,EACjD,IAAIwD,EAAJ,CACA,IAAMK,EAAU,UAAM9D,EAAN,YAAWC,GAC3B,GAAKa,EAAWiD,IAAID,GAApB,CACAtB,GAAgBD,GAChB,IAAMyB,EAAkBpD,EAAWqD,QACnCD,EAAgB/D,GAAGD,GAAGL,OAASkB,EAC/B,UAAAC,EAAWoD,IAAIJ,UAAf,SAA4Bd,SAAQ,YAAa,IAAD,mBAAV9C,EAAU,KAAPC,EAAO,KAC9C6D,EAAgB7D,GAAGD,GAAGP,OAASkB,KAGjC,IADA,IAAMsD,EAAgBxD,EAAcqD,EAAiBnD,IAAepB,EAAOG,MAAQH,EAAOI,IAAMJ,EAAOG,OAC9FM,EAAI,EAAGA,EA7BE,IA6BiBA,EACjC,IAAK,IAAIC,EAAI,EAAGA,EA/BC,IA+BmBA,EAClC6D,EAAgB7D,GAAGD,GAAGmB,YAAc8C,EAAcJ,IAAd,UAAqB7D,EAArB,YAA0BC,IAC9D6D,EAAgB7D,GAAGD,GAAGoB,gBAAiB,EAG3CgC,EAAcU,GACdL,EAAcQ,GACdX,GAAoB,MA4BdrB,uBA1BuB,SAACnC,EAAWC,GAAe,IAAD,EACjD6D,EAAU,UAAM9D,EAAN,YAAWC,GAC3B,GAAKa,EAAWiD,IAAID,GAApB,CACA,IAAME,EAAkBpD,EAAWqD,QACnC,UAAAnD,EAAWoD,IAAIJ,UAAf,SAA4Bd,SAAQ,YAAa,IAAD,mBAAV9C,EAAU,KAAPC,EAAO,KAC9C6D,EAAgB7D,GAAGD,GAAGoB,gBAAiB,KAEzCgC,EAAcU,KAoBR5B,uBAlBuB,WAE7B,IADA,IAAM4B,EAAkBpD,EAAWqD,QAC1B/D,EAAI,EAAGA,EAAI8D,EAAgB,GAAG1D,SAAUJ,EAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAI6D,EAAgB1D,SAAUH,EAC5C6D,EAAgB7D,GAAGD,GAAGoB,gBAAiB,EAG3CgC,EAAcU,S,SA/MbvE,O,iBAAAA,I,aAAAA,I,gBAAAA,M,KAmOL2E,IAASC,OACP,kBAAChC,EAAD,MACAiC,SAASC,eAAe,W","file":"static/js/main.91e273df.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç'\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ'\n  } else {\n    return ''\n  }\n}\n\ninterface SquareContent {\n  marker: Marker\n  isValidMove: boolean\n  wouldBeFlipped: boolean\n}\n\nfunction createBoardArray(width: number, height: number, nextPlayer: Marker): SquareContent[][] {\n  let ret: SquareContent[][] = []\n  for (let j = 0; j < height; ++j) {\n    let row = []\n    for (let i = 0; i < width; ++i) {\n      row.push({ marker: Marker.FREE, isValidMove: false, wouldBeFlipped: false })\n    }\n    ret.push(row)\n  }\n  const halfWidth = Math.floor(width / 2)\n  const halfHeight = Math.floor(height / 2)\n  ret[halfHeight][halfWidth].marker = Marker.BOT\n  ret[halfHeight][halfWidth - 1].marker = Marker.HUMAN\n  ret[halfHeight - 1][halfWidth].marker = Marker.HUMAN\n  ret[halfHeight - 1][halfWidth - 1].marker = Marker.BOT\n  getValidMoves(ret, nextPlayer).forEach((_v, k) => {\n    const [x, y] = k.split(',')\n    ret[Number(y)][Number(x)].isValidMove = true\n  })\n  return ret\n}\n\nfunction flippableInDirection(\n  board: SquareContent[][], x: number, y: number, i: number, j: number, player: Marker\n): [number, number][] {\n  let flippable: [number, number][] = []\n  while (true) {\n    x += i\n    y += j\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) { return [] }\n    if (board[y][x].marker === Marker.FREE) {\n      return []\n    } else if (board[y][x].marker === player) {\n      return flippable\n    } else {\n      flippable.push([x, y])\n    }\n  }\n}\n\nfunction flippablePositions(board: SquareContent[][], x: number, y: number, player: Marker): [number, number][] {\n  if (board[y][x].marker !== Marker.FREE) { return [] }\n  let flippable: [number, number][] = []\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      flippable = flippable.concat(flippableInDirection(board, x, y, i, j, player))\n    }\n  }\n  return flippable\n}\n\nfunction getValidMoves(boardArray: SquareContent[][], nextPlayer: Marker): Map<string, [number, number][]> {\n  const validMoves = new Map<string, [number, number][]>()\n  for (let i = 0; i < boardArray.length; ++i) {\n    for (let j = 0; j < boardArray[0].length; ++j) {\n      let flippable = flippablePositions(boardArray, i, j, nextPlayer)\n      if (flippable.length > 0) {\n        validMoves.set(`${i},${j}`, flippable)\n      }\n    }\n  }\n  return validMoves\n}\n\ninterface SquareProps {\n  value: SquareContent\n  nextPlayer: Marker\n  onClick: () => void\n  handleMouseEnter: () => void\n  handleMouseLeave: () => void\n}\n\nfunction Square(props: SquareProps): JSX.Element {\n  let cssClasses = 'square'\n  if (props.value.isValidMove) {\n    cssClasses += ' valid-move'\n    if (props.nextPlayer === Marker.HUMAN) {\n      cssClasses += ' valid-human-move'\n    } else {\n      cssClasses += ' valid-bot-move'\n    }\n  }\n  if (props.value.wouldBeFlipped) {\n    cssClasses += ' would-be-flipped'\n    if (props.nextPlayer === Marker.HUMAN) {\n      cssClasses += ' would-be-flipped-human'\n    } else {\n      cssClasses += ' would-be-flipped-bot'\n    }\n  }\n  return (\n    <td className={cssClasses} onClick={props.onClick} onMouseEnter={props.handleMouseEnter} onMouseLeave={props.handleMouseLeave}>\n      {markerToStr(props.value.marker)}\n    </td>\n  )\n}\n\ninterface BoardProps {\n  boardArray: SquareContent[][]\n  nextPlayer: Marker\n  handleBoardClick: (x: number, y: number) => void\n  handleSquareMouseEnter: (x: number, y: number) => void\n  handleSquareMouseLeave: () => void\n}\n\nfunction Board(props: BoardProps): JSX.Element {\n  return (\n    <div>\n      <table><tbody>\n        {props.boardArray.map((row, y) => (\n          <tr key={y} className=\"board-row\">\n            {row.map((sc, x) => (\n              <Square\n                key={`${x} ${y}`}\n                value={sc}\n                nextPlayer={props.nextPlayer}\n                onClick={() => props.handleBoardClick(x, y)}\n                handleMouseEnter={() => props.handleSquareMouseEnter(x, y)}\n                handleMouseLeave={props.handleSquareMouseLeave}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody></table>\n    </div>\n  )\n}\n\nfunction Game(): JSX.Element {\n  const BOARD_HEIGHT = 8\n  const BOARD_WIDTH = 8\n  const [isHumanNext, setIsHumanNext] = useState(true)\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\n  const [boardArray, setBoardArray] = useState(createBoardArray(BOARD_WIDTH, BOARD_HEIGHT, nextPlayer))\n  const [lastPlayerPassed, setLastPlayerPassed] = useState(false)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n  const [validMoves, setValidMoves] = useState(getValidMoves(boardArray, nextPlayer))\n  const status = isGameFinished ? 'Game over.' : `Next player: ${markerToStr(nextPlayer)}`\n  if (!isGameFinished) {\n    if (validMoves.size === 0) {\n      if (lastPlayerPassed) {\n        setIsGameFinished(true)\n      } else {\n        setIsHumanNext(!isHumanNext)\n        setLastPlayerPassed(true)\n      }\n    }\n  }\n  const handleBoardClick = (x: number, y: number) => {\n    if (isGameFinished) { return }\n    const currentKey = `${x},${y}`\n    if (!validMoves.has(currentKey)) { return }\n    setIsHumanNext(!isHumanNext)\n    const boardArrayClone = boardArray.slice()\n    boardArrayClone[y][x].marker = nextPlayer\n    validMoves.get(currentKey)?.forEach(([i, j]) => {\n      boardArrayClone[j][i].marker = nextPlayer\n    })\n    const newValidMoves = getValidMoves(boardArrayClone, nextPlayer === Marker.HUMAN ? Marker.BOT : Marker.HUMAN)\n    for (let i = 0; i < BOARD_WIDTH; ++i) {\n      for (let j = 0; j < BOARD_HEIGHT; ++j) {\n        boardArrayClone[j][i].isValidMove = newValidMoves.has(`${i},${j}`)\n        boardArrayClone[j][i].wouldBeFlipped = false\n      }\n    }\n    setBoardArray(boardArrayClone)\n    setValidMoves(newValidMoves)\n    setLastPlayerPassed(false)\n  }\n  const handleSquareMouseEnter = (x: number, y: number) => {\n    const currentKey = `${x},${y}`\n    if (!validMoves.has(currentKey)) { return }\n    const boardArrayClone = boardArray.slice()\n    validMoves.get(currentKey)?.forEach(([i, j]) => {\n      boardArrayClone[j][i].wouldBeFlipped = true\n    })\n    setBoardArray(boardArrayClone)\n  }\n  const handleSquareMouseLeave = () => {\n    const boardArrayClone = boardArray.slice()\n    for (let i = 0; i < boardArrayClone[0].length; ++i) {\n      for (let j = 0; j < boardArrayClone.length; ++j) {\n        boardArrayClone[j][i].wouldBeFlipped = false\n      }\n    }\n    setBoardArray(boardArrayClone)\n  }\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board\n          boardArray={boardArray}\n          nextPlayer={nextPlayer}\n          handleBoardClick={handleBoardClick}\n          handleSquareMouseEnter={handleSquareMouseEnter}\n          handleSquareMouseLeave={handleSquareMouseLeave}\n        />\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}