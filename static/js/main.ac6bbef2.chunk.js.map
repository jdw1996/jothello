{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","Square","props","className","onClick","value","Board","handleSquareClick","handleBoardClick","boardArray","map","row","key","Game","useState","isHumanNext","setIsHumanNext","ret","Array","fill","halfX","Math","floor","halfY","createBoardArray","setBoardArray","nextPlayer","status","concat","flippablePositions","boardArrayClone","slice","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac6bbef2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç'\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ'\n  } else {\n    return ''\n  }\n}\n\nfunction createBoardArray(x: number, y: number) : Marker[][] {\n  let ret = []\n  for (let i = 0; i < y; ++i) {\n    let row = Array(x).fill(Marker.FREE)\n    ret.push(row)\n  }\n  const halfX = Math.floor(x / 2)\n  const halfY = Math.floor(y / 2)\n  ret[halfY][halfX] = Marker.BOT\n  ret[halfY][halfX-1] = Marker.HUMAN\n  ret[halfY-1][halfX] = Marker.HUMAN\n  ret[halfY-1][halfX-1] = Marker.BOT\n  return ret\n}\n\nfunction flippableInDirection(\n  board: Marker[][], x: number, y: number, i: number, j: number, player: Marker\n) : [number,number][] {\n  let flippable: [number,number][] = []\n  while (true) {\n    x += i\n    y += j\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) { return [] }\n    if (board[y][x] === Marker.FREE) {\n      return []\n    } else if (board[y][x] === player) {\n      return flippable\n    } else {\n      flippable.push([x,y])\n    }\n  }\n}\n\nfunction flippablePositions(board: Marker[][], x: number, y: number, player: Marker) : [number,number][] {\n  if (board[y][x] !== Marker.FREE) { return [] }\n  let flippable: [number,number][] = []\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      flippable = flippable.concat(flippableInDirection(board, x, y, i, j, player))\n    }\n  }\n  return flippable\n}\n\ninterface SquareProps {\n  x: number\n  y: number\n  value: Marker\n  onClick: (x: number, y: number) => void\n}\n\nfunction Square(props: SquareProps) : JSX.Element {\n  return (\n      <td className=\"square\" onClick={() => props.onClick(props.x, props.y) }>\n        {markerToStr(props.value)}\n      </td>\n    )\n}\n\ninterface BoardProps {\n  isHumanNext: boolean\n  boardArray: Marker[][]\n  handleBoardClick: (x: number, y: number) => void\n}\n\nfunction Board(props: BoardProps) : JSX.Element {\n  const handleSquareClick = (x: number, y: number) => { props.handleBoardClick(x, y) }\n  return (\n    <div>\n      <table><tbody>\n        {props.boardArray.map((row, y) => (\n          <tr key={y} className=\"board-row\">\n            {row.map((marker, x) => (\n              <Square key={`${x} ${y}`} value={marker} onClick={handleSquareClick} x={x} y={y} />\n            ))}\n          </tr>\n        ))}\n      </tbody></table>\n    </div>\n  )\n}\n\nfunction Game() : JSX.Element {\n  const [isHumanNext, setIsHumanNext] = useState(true)\n  const [boardArray, setBoardArray] = useState(createBoardArray(8,8))\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\n  const status = `Next player: ${markerToStr(nextPlayer)}`\n  const handleBoardClick = (x: number, y: number) => {\n    let flippable = flippablePositions(boardArray, x, y, nextPlayer)\n    if (flippable.length === 0) { return }\n    setIsHumanNext(!isHumanNext)\n    const boardArrayClone = boardArray.slice()\n    boardArrayClone[y][x] = nextPlayer\n    flippable.forEach(([i,j]) => {\n      boardArrayClone[j][i] = nextPlayer\n    });\n    setBoardArray(boardArrayClone)\n  }\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board isHumanNext={isHumanNext} handleBoardClick={handleBoardClick} boardArray={boardArray} />\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}