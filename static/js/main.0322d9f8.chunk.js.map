{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","flippablePositions","concat","getValidMoves","boardArray","nextPlayer","validMoves","Map","set","Square","props","cssClasses","value","isValidMove","className","onClick","Board","handleSquareClick","handleBoardClick","map","row","key","sc","Game","useState","isHumanNext","setIsHumanNext","width","height","ret","halfWidth","Math","floor","halfHeight","forEach","_v","k","split","Number","createBoardArray","setBoardArray","lastPlayerPassed","setLastPlayerPassed","isGameFinished","setIsGameFinished","setValidMoves","status","size","currentKey","has","boardArrayClone","slice","get","newValidMoves","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0322d9f8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç'\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ'\n  } else {\n    return ''\n  }\n}\n\ninterface SquareContent {\n  marker: Marker\n  isValidMove: boolean\n}\n\nfunction createBoardArray(width: number, height: number, nextPlayer: Marker): SquareContent[][] {\n  let ret: SquareContent[][] = []\n  for (let j = 0; j < height; ++j) {\n    let row = []\n    for (let i = 0; i < width; ++i) {\n      row.push({ marker: Marker.FREE, isValidMove: false })\n    }\n    ret.push(row)\n  }\n  const halfWidth = Math.floor(width / 2)\n  const halfHeight = Math.floor(height / 2)\n  ret[halfHeight][halfWidth].marker = Marker.BOT\n  ret[halfHeight][halfWidth - 1].marker = Marker.HUMAN\n  ret[halfHeight - 1][halfWidth].marker = Marker.HUMAN\n  ret[halfHeight - 1][halfWidth - 1].marker = Marker.BOT\n  getValidMoves(ret, nextPlayer).forEach((_v, k) => {\n    const [x, y] = k.split(',')\n    ret[Number(y)][Number(x)].isValidMove = true\n  })\n  return ret\n}\n\nfunction flippableInDirection(\n  board: SquareContent[][], x: number, y: number, i: number, j: number, player: Marker\n): [number, number][] {\n  let flippable: [number, number][] = []\n  while (true) {\n    x += i\n    y += j\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) { return [] }\n    if (board[y][x].marker === Marker.FREE) {\n      return []\n    } else if (board[y][x].marker === player) {\n      return flippable\n    } else {\n      flippable.push([x, y])\n    }\n  }\n}\n\nfunction flippablePositions(board: SquareContent[][], x: number, y: number, player: Marker): [number, number][] {\n  if (board[y][x].marker !== Marker.FREE) { return [] }\n  let flippable: [number, number][] = []\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      flippable = flippable.concat(flippableInDirection(board, x, y, i, j, player))\n    }\n  }\n  return flippable\n}\n\nfunction getValidMoves(boardArray: SquareContent[][], nextPlayer: Marker): Map<string, [number, number][]> {\n  const validMoves = new Map<string, [number, number][]>()\n  for (let i = 0; i < boardArray.length; ++i) {\n    for (let j = 0; j < boardArray[0].length; ++j) {\n      let flippable = flippablePositions(boardArray, i, j, nextPlayer)\n      if (flippable.length > 0) {\n        validMoves.set(`${i},${j}`, flippable)\n      }\n    }\n  }\n  return validMoves\n}\n\ninterface SquareProps {\n  x: number\n  y: number\n  value: SquareContent\n  onClick: (x: number, y: number) => void\n  nextPlayer: Marker\n}\n\nfunction Square(props: SquareProps): JSX.Element {\n  let cssClasses = 'square'\n  if (props.value.isValidMove) {\n    cssClasses += ' valid-move'\n    if (props.nextPlayer === Marker.HUMAN) {\n      cssClasses += ' valid-human-move'\n    } else {\n      cssClasses += ' valid-bot-move'\n    }\n  }\n  return (\n    <td className={cssClasses} onClick={() => props.onClick(props.x, props.y)}>\n      {markerToStr(props.value.marker)}\n    </td>\n  )\n}\n\ninterface BoardProps {\n  boardArray: SquareContent[][]\n  handleBoardClick: (x: number, y: number) => void\n  nextPlayer: Marker\n}\n\nfunction Board(props: BoardProps): JSX.Element {\n  const handleSquareClick = (x: number, y: number) => { props.handleBoardClick(x, y) }\n  return (\n    <div>\n      <table><tbody>\n        {props.boardArray.map((row, y) => (\n          <tr key={y} className=\"board-row\">\n            {row.map((sc, x) => (\n              <Square key={`${x} ${y}`} value={sc} onClick={handleSquareClick} x={x} y={y} nextPlayer={props.nextPlayer} />\n            ))}\n          </tr>\n        ))}\n      </tbody></table>\n    </div>\n  )\n}\n\nfunction Game(): JSX.Element {\n  const BOARD_HEIGHT = 8\n  const BOARD_WIDTH = 8\n  const [isHumanNext, setIsHumanNext] = useState(true)\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\n  const [boardArray, setBoardArray] = useState(createBoardArray(BOARD_WIDTH, BOARD_HEIGHT, nextPlayer))\n  const [lastPlayerPassed, setLastPlayerPassed] = useState(false)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n  const [validMoves, setValidMoves] = useState(getValidMoves(boardArray, nextPlayer))\n  const status = isGameFinished ? 'Game over.' : `Next player: ${markerToStr(nextPlayer)}`\n  if (!isGameFinished) {\n    if (validMoves.size === 0) {\n      if (lastPlayerPassed) {\n        setIsGameFinished(true)\n      } else {\n        setIsHumanNext(!isHumanNext)\n        setLastPlayerPassed(true)\n      }\n    }\n  }\n  const handleBoardClick = (x: number, y: number) => {\n    if (isGameFinished) { return }\n    const currentKey = `${x},${y}`\n    if (!validMoves.has(currentKey)) { return }\n    setIsHumanNext(!isHumanNext)\n    const boardArrayClone = boardArray.slice()\n    boardArrayClone[y][x].marker = nextPlayer\n    validMoves.get(currentKey)?.forEach(([i, j]) => {\n      boardArrayClone[j][i].marker = nextPlayer\n    })\n    const newValidMoves = getValidMoves(boardArrayClone, nextPlayer === Marker.HUMAN ? Marker.BOT : Marker.HUMAN)\n    for (let i = 0; i < BOARD_WIDTH; ++i) {\n      for (let j = 0; j < BOARD_HEIGHT; ++j) {\n        boardArrayClone[j][i].isValidMove = newValidMoves.has(`${i},${j}`)\n      }\n    }\n    setBoardArray(boardArrayClone)\n    setValidMoves(newValidMoves)\n    setLastPlayerPassed(false)\n  }\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board handleBoardClick={handleBoardClick} boardArray={boardArray} nextPlayer={nextPlayer} />\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}