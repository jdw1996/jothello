{"version":3,"sources":["index.tsx"],"names":["Marker","markerToStr","marker","HUMAN","BOT","flippableInDirection","board","x","y","i","j","player","flippable","length","FREE","push","flippablePositions","concat","Square","props","className","onClick","value","Board","handleSquareClick","handleBoardClick","boardArray","map","row","key","Game","useState","isHumanNext","setIsHumanNext","ret","Array","fill","halfX","Math","floor","halfY","createBoardArray","setBoardArray","lastPlayerPassed","setLastPlayerPassed","isGameFinished","setIsGameFinished","nextPlayer","status","validMoves","Map","set","size","currentKey","has","boardArrayClone","slice","get","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64431c76.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nenum Marker {\n  HUMAN,\n  BOT,\n  FREE\n}\n\nfunction markerToStr(marker: Marker): string {\n  if (marker === Marker.HUMAN) {\n    return 'üëç'\n  } else if (marker === Marker.BOT) {\n    return 'ü§ñ'\n  } else {\n    return ''\n  }\n}\n\nfunction createBoardArray(x: number, y: number) : Marker[][] {\n  let ret = []\n  for (let i = 0; i < y; ++i) {\n    let row = Array(x).fill(Marker.FREE)\n    ret.push(row)\n  }\n  const halfX = Math.floor(x / 2)\n  const halfY = Math.floor(y / 2)\n  ret[halfY][halfX] = Marker.BOT\n  ret[halfY][halfX-1] = Marker.HUMAN\n  ret[halfY-1][halfX] = Marker.HUMAN\n  ret[halfY-1][halfX-1] = Marker.BOT\n  return ret\n}\n\nfunction flippableInDirection(\n  board: Marker[][], x: number, y: number, i: number, j: number, player: Marker\n) : [number,number][] {\n  let flippable: [number,number][] = []\n  while (true) {\n    x += i\n    y += j\n    if (x < 0 || x >= board[0].length || y < 0 || y >= board.length) { return [] }\n    if (board[y][x] === Marker.FREE) {\n      return []\n    } else if (board[y][x] === player) {\n      return flippable\n    } else {\n      flippable.push([x,y])\n    }\n  }\n}\n\nfunction flippablePositions(board: Marker[][], x: number, y: number, player: Marker) : [number,number][] {\n  if (board[y][x] !== Marker.FREE) { return [] }\n  let flippable: [number,number][] = []\n  for (let i = -1; i <= 1; ++i) {\n    for (let j = -1; j <= 1; ++j) {\n      flippable = flippable.concat(flippableInDirection(board, x, y, i, j, player))\n    }\n  }\n  return flippable\n}\n\ninterface SquareProps {\n  x: number\n  y: number\n  value: Marker\n  onClick: (x: number, y: number) => void\n}\n\nfunction Square(props: SquareProps) : JSX.Element {\n  return (\n      <td className=\"square\" onClick={() => props.onClick(props.x, props.y) }>\n        {markerToStr(props.value)}\n      </td>\n    )\n}\n\ninterface BoardProps {\n  boardArray: Marker[][]\n  handleBoardClick: (x: number, y: number) => void\n}\n\nfunction Board(props: BoardProps) : JSX.Element {\n  const handleSquareClick = (x: number, y: number) => { props.handleBoardClick(x, y) }\n  return (\n    <div>\n      <table><tbody>\n        {props.boardArray.map((row, y) => (\n          <tr key={y} className=\"board-row\">\n            {row.map((marker, x) => (\n              <Square key={`${x} ${y}`} value={marker} onClick={handleSquareClick} x={x} y={y} />\n            ))}\n          </tr>\n        ))}\n      </tbody></table>\n    </div>\n  )\n}\n\nfunction Game() : JSX.Element {\n  const BOARD_HEIGHT = 8\n  const BOARD_WIDTH = 8\n  const [isHumanNext, setIsHumanNext] = useState(true)\n  const [boardArray, setBoardArray] = useState(createBoardArray(BOARD_WIDTH, BOARD_HEIGHT))\n  const [lastPlayerPassed, setLastPlayerPassed] = useState(false)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n  const nextPlayer = isHumanNext ? Marker.HUMAN : Marker.BOT\n  const status = isGameFinished ? 'Game over.' : `Next player: ${markerToStr(nextPlayer)}`\n  let validMoves = new Map<string, [number, number][]>()\n  if (!isGameFinished) {\n    for (let i = 0; i < BOARD_HEIGHT; ++i) {\n      for (let j = 0; j < BOARD_WIDTH; ++j) {\n        let flippable = flippablePositions(boardArray, i, j, nextPlayer)\n        if (flippable.length > 0) {\n          validMoves.set(`${i},${j}`, flippable)\n        }\n      }\n    }\n    if (validMoves.size === 0) {\n      if (lastPlayerPassed) {\n        setIsGameFinished(true)\n      } else {\n        setIsHumanNext(!isHumanNext)\n        setLastPlayerPassed(true)\n      }\n    }\n  }\n  const handleBoardClick = (x: number, y: number) => {\n    if (isGameFinished) { return }\n    const currentKey = `${x},${y}`\n    if (!validMoves.has(currentKey)) { return }\n    setIsHumanNext(!isHumanNext)\n    const boardArrayClone = boardArray.slice()\n    boardArrayClone[y][x] = nextPlayer\n    validMoves.get(currentKey)?.forEach(([i,j]) => {\n      boardArrayClone[j][i] = nextPlayer\n    });\n    setBoardArray(boardArrayClone)\n    setLastPlayerPassed(false)\n  }\n  return (\n    <div className=\"game\">\n      <div className=\"status\">{status}</div>\n      <div className=\"game-board\">\n        <Board handleBoardClick={handleBoardClick} boardArray={boardArray} />\n      </div>\n    </div>\n  )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}